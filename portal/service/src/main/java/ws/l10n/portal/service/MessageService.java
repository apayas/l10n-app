package ws.l10n.portal.service;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.base.Strings;
import com.google.common.collect.Collections2;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ws.l10n.portal.domain.Message;
import ws.l10n.portal.domain.view.LocaleView;
import ws.l10n.portal.repository.LocaleRepository;
import ws.l10n.portal.repository.MessageRepository;
import ws.l10n.property.Property;
import ws.l10n.property.PropertyHandler;
import ws.l10n.property.PropertyReader;
import ws.l10n.property.PropertyWriter;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * @author Sergey Boguckiy
 */
@Service
@Transactional
public class MessageService {

    @Autowired
    private PropertyWriter propertyWriter;
    @Autowired
    private PropertyReader propertyReader;
    @Autowired
    private MessageRepository messageRepository;
    @Autowired
    private LocaleRepository localeRepository;

    public void addToAllLocales(final Integer versionId, final String key, List<Message> messages) {
        List<Message> transformed = Lists.transform(messages, new Function<Message, Message>() {
            @Override
            public Message apply(Message input) {
                return Message.builder().from(input).setKey(key).setVersionId(versionId).build();
            }
        });
        messageRepository.saveAll(transformed);
    }

    public void updateForAllLocales(Integer versionId, String key, List<Message> messages) {

        Collection<Message> filtered = Collections2.filter(new ArrayList<Message>(messages), new Predicate<Message>() {
            @Override
            public boolean apply(Message input) {
                return input.getId() != -1;
            }
        });

        Collection<Integer> messageIds = Collections2.transform(filtered, new Function<Message, Integer>() {
            @Override
            public Integer apply(Message input) {
                return input.getId();
            }
        });

        messageRepository.updateKey(versionId, key, messageIds);

        for (Message message : messages) {
            if (message.getId() == -1) {
                if (!Strings.isNullOrEmpty(message.getValue())) {
                    Message messageToSave = Message.builder().from(message).setId(null).setVersionId(versionId).build();
                    messageRepository.save(messageToSave);
                }
            } else {
                messageRepository.updateValue(versionId, message.getValue(), message.getId());
            }

        }
    }

    public void parseAndSave(InputStream inputStream, final String localeId, final Integer versionId, final boolean replaceExisted) throws IOException {
        propertyReader.read(inputStream, new PropertyHandler() {
            @Override
            public void handle(String key, String value) {
                Message message = messageRepository.find(key, localeId, versionId);
                if (!replaceExisted && message != null) {
                    return;
                }
                if (message == null) {
                    message = Message.builder().setKey(key).setLocaleId(localeId).build();
                }
                Message messageToSave = Message.builder().from(message).setVersionId(versionId).setValue(value).build();
                messageRepository.save(messageToSave);
            }
        });
    }

    public void writeMessages(Integer versionId, String localeId, final PrintWriter writer) throws IOException {
        writer.write(getPropertiesHeader(localeId));
        final BufferedWriter bw = new BufferedWriter(writer);
        List<Message> messages = messageRepository.findByVersionIdAndLocaleId(versionId, localeId);
        for (Message message : messages) { // TODO lazy loading
            propertyWriter.write(bw, new Property(message.getKey(), message.getValue()));
        }
        bw.flush();
    }

    private String getPropertiesHeader(String localeId) {
        LocaleView localeView = localeRepository.getLocaleViewById(localeId);
        return FILE_HEADER.replace("%", localeView.getId());
    }

    private static final String FILE_HEADER =
            "###########################################################################################################\n" +
            "#                                             Locale '%'                                              #\n" +
            "#                                     File generated by L10n Service                                      #\n" +
            "###########################################################################################################\n";
}
